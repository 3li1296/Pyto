# -*- coding: utf-8 -*-
"""
This module allows you to interact with Pyto with a Pythonic API.
"""

import PytoClasses
from importlib.machinery import SourceFileLoader
import os

# MARK: - I/O

__PyInputHelper__ = PytoClasses.PyInputHelper

def input(prompt="Input"):
    """
    Requests input with given prompt.
    
    Args:
        prompt: Text printed before the user's input without a newline.
    """
    
    __PyInputHelper__.userInput = None
    
    __PyInputHelper__.showAlertWithPrompt(prompt)
    
    while (__PyInputHelper__.userInput == None):
        continue

    userInput = __PyInputHelper__.userInput
    __PyInputHelper__.userInput = None
    return str(userInput)

__PyOutputHelper__ = PytoClasses.PyOutputHelper

def print(*objects, sep=None, end=None):
    """
    Prints to the Pyto console, not to the stdout. Works as the builtin `print` function but does not support printing to a custom file. Pyto catches by default the stdout and the stderr, so use the builtin function instead. This function is mainly for internal use.
    """
    if sep is None:
        sep = ' '
    if end is None:
        end = '\n'
    array = map(str, objects)
    __PyOutputHelper__.print(sep.join(array)+end)

# MARK: - Alerts

Alert = PytoClasses.Alert
"""
A class representing an alert.

Example:
    def ok() -> None:
        print("Good Bye!")

    alert = Pyto.Alert.initWithTitle("Hello", message="Hello World!")
    alert.addActionWithTitle("Ok", handler=ok)
    alert.addCancelActionWithTitle("Cancel", handler=None)
    alert.show()
"""

# MARK: - Importing

def module(name):
    """
    Returns the given module located in the app's Documents directory.
    
    Args:
        name: The name of the script without the extension located in the Documents directory.
    """
    return SourceFileLoader(name, os.path.expanduser("~/"+name+".py")).load_module()

def package(name):
    """
        Returns the given package located in the app's Documents directory.
        
        Args:
        name: The name of the package located in the Documents directory.
        """
    return SourceFileLoader(name, os.path.expanduser("~/"+name)).load_module()
