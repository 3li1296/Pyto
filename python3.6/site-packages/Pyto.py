# -*- coding: utf-8 -*-
"""
This module allows you to interact with Pyto with a Pythonic API.
"""

from rubicon.objc import *

# MARK: - Input

__PyInputHelper__ = ObjCClass("Pyto.PyInputHelper")

def input(prompt="Input"):
    """
    Requests input with given prompt.
    
    Args:
        prompt: The title of the shown alert.
    """
    __PyInputHelper__.showAlertWithPrompt(prompt)
    
    while (__PyInputHelper__.userInput == None):
        continue

    userInput = __PyInputHelper__.userInput
    __PyInputHelper__.userInput = None
    return userInput

# MARK: - Output

__PyOutputHelper__ = ObjCClass("Pyto.PyOutputHelper")

def print(*objects, sep=None, end=None):
    """
    Prints to the Pyto console, not to the stdout. Works as the builtin `print` function but does not support printing to a custom file.
    """
    if sep is None:
        sep = ' '
    if end is None:
        end = '\n'
    array = map(str, objects)
    __PyOutputHelper__.print(sep.join(array)+end)

# MARK: - Sharing

__PySharingHelper__ = ObjCClass("Pyto.PySharingHelper")

FilePicker = ObjCClass("Pyto.PyFilePicker")
"""
A class representing a file picker.

Example:
    filePicker = Pyto.FilePicker.new()
    filePicker.fileTypes = ["public.data"]
    filePicker.allowsMultipleSelection = True
    
    def filesPicked() -> None:
        files = Pyto.pickedFiles()
        Pyto.shareItems(files)
        
    filePicker.completion = filesPicked
    Pyto.pickDocumentsWithFilePicker(filePicker)
"""

def shareItems(items):
    """
    Opens a share sheet with given items.
    
    Args:
        items: Items to be shared with the sheet.
    """
    __PySharingHelper__.share(items)

def pickedFiles():
    """
    Returns files picked with `pickDocumentsWithFilePicker` as URLs.
    """
    return FilePicker.urls

def pickDocumentsWithFilePicker(filePicker):
    """
    Pick documents with given parameters as a `FilePicker`.
    
    Args:
        filePicker: The parameters of the file picker to be presented.
    """
    __PySharingHelper__.presentFilePicker(filePicker)

# Alerts

Alert = ObjCClass("Pyto.PyAlert")
"""
A class representing an alert.

Example:
    def ok() -> None:
        print("Good Bye!")

    alert = Pyto.Alert.initWithTitle("Hello", message="Hello World!")
    alert.addActionWithTitle("Ok", handler=ok)
    alert.addCancelActionWithTitle("Cancel", handler=None)
    alert.show()
"""
