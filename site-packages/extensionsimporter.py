"""
Module used internally by Pyto for importing C extension.
"""

if __platform__ is not iOS:
    raise ImportError("extensionsimporter can only be imported on iOS. C extensions can be loaded from anywhere on macOS. To check for platform, see the __platform__ global variable.")

import sys
import importlib

# MARK: - NumPy

class NumpyImporter(object):
    """
    Meta path for importing NumPy to be added to `sys.meta_path`.
    """
    
    def find_module(self, fullname, mpath=None):
        if fullname in ('numpy.core._multiarray_umath', 'numpy.fft.fftpack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.lapack_lite', 'numpy.random.mtrand'):
            return self
        
        return
    
    def load_module(self, fullname):
        f = '__' + fullname.replace('.', '_')
        mod = sys.modules.get(f)
        if mod is None:
            mod = importlib.__import__(f)
            sys.modules[fullname] = mod
            return mod
        
        return mod

# MARK: - Matplotlib

class MatplotlibImporter(object):
    """
    Meta path for importing Matplotlib to be added to `sys.meta_path`.
    """
    
    def find_module(self, fullname, mpath=None):
        if fullname in ('matplotlib.backends._backend_agg', 'matplotlib._path', 'matplotlib._image', 'matplotlib._png', 'matplotlib.ft2font', 'matplotlib._contour', 'matplotlib._qhull', 'matplotlib._tri', 'matplotlib.ttconv', 'matplotlib._cntr', 'matplotlib._delaunay'):
            return self
        
        return
    
    def load_module(self, fullname):
        f = '__' + fullname.replace('.', '_')
        mod = sys.modules.get(f)
        if mod is None:
            mod = importlib.__import__(f)
            sys.modules[fullname] = mod
            return mod
        
        return mod

class PandasImporter(object):
    def find_module(self, fullname, mpath=None):
        if 'pandas.' in fullname:
            return self
        
        return
    
    def load_module(self, fullname):
        f = '__' + fullname.replace('.', '_')
        mod = sys.modules.get(f)
        if mod is None:
            mod = importlib.__import__(f)
            sys.modules[fullname] = mod
            return mod
        
        return mod

# MARK: - All

__all__ = ['NumpyImporter', 'MatplotlibImporter', 'PandasImporter']
