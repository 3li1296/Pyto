from pyto import EditorSplitViewController
import jedi
import sys

def suggestForCode(code, path):
    
    def visibleEditor():
        return EditorSplitViewController.visible.editor
    
    try:
        script = jedi.Script(code, len(code.splitlines()), len(code.splitlines()[-1])-1, path)
    
        suggestions = []
        completions = []
    
        docs = {}
    
        for completion in script.completions():
            suggestion = completion.name
        
            if (completion.complete.startswith(".")):
                suggestion = "."+suggestion
        
            if completion.name in __builtins__["deprecated"]:
                continue
        
            suggestions.append(suggestion)
            completions.append(completion.complete)

            docString = completion.docstring()
            
            if (completion.type == "module"):
                docString = ""
            
            docString = (completion.name+"\n"+completion.type)+"\n\n"+docString
            docs[suggestion] = docString
        
        visibleEditor().completions = completions
        visibleEditor().suggestions = suggestions
        visibleEditor().docStrings = docs
    except Exception as e:
        
        sys.__stdout__.write(str(e)+"\n")
        
        if visibleEditor() == None:
            return
        
        visibleEditor().completions = []
        visibleEditor().suggestions = []
        visibleEditor().docStrings = None

def suggestionsForCode(code):
    
    try:
        script = jedi.Script(code, len(code.splitlines()), len(code.splitlines()[-1])-1)
        
        suggestions = {}
        
        for completion in script.completions():
            
            if (completion.complete.startswith(".")):
                suggestion = "."+suggestion
            
            if (completion.name.startswith("_") or completion.name in __builtins__["deprecated"]):
                continue
        
            suggestions[completion.name] = completion.complete
    
        return suggestions
    except Exception as e:
        return {}
