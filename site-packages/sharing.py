# -*- coding: utf-8 -*-
"""
This module allows you to share items, to import files and to open URLs.
"""

import PytoClasses
import mainthread
from rubicon.objc import *

__PySharingHelper__ = PytoClasses.PySharingHelper

def shareItems(items):
    """
    Opens a share sheet with given items.
        
    Args:
        items: Items to be shared with the sheet.
    """
    __PySharingHelper__.share(items)

# MARK: - File picker

FilePicker = PytoClasses.FilePicker
"""
A class representing a file picker.
    
Example:
    filePicker = sharing.FilePicker.new()
    filePicker.fileTypes = ["public.data"]
    filePicker.allowsMultipleSelection = True
    
    def filesPicked() -> None:
        files = sharing.pickedFiles()
        sharing.shareItems(files)
    
    filePicker.completion = filesPicked
    sharing.pickDocumentsWithFilePicker(filePicker)
    """

def pickDocumentsWithFilePicker(filePicker):
    """
    Pick documents with given parameters as a `FilePicker`.
        
    Args:
        filePicker: The parameters of the file picker to be presented.
    """
    __PySharingHelper__.presentFilePicker(filePicker)

def pickedFiles():
    """
    Returns files picked with `pickDocumentsWithFilePicker` as URLs.
    """
    return FilePicker.urls

# MARK: - URLs

__NSURL__ = ObjCClass("NSURL")
__UIApplication__ = ObjCClass("UIApplication")

def openURL(url):
    """
    Opens the given URL.
    
    Args:
        url: URL to open. Can be a String or an Objective-C `NSURL`.
    """
    
    def __openURL__() -> None:
        __UIApplication__.sharedApplication.openURL(__url__)
    
    if (type(url) is str):
        __url__ = __NSURL__.URLWithString(url)
        mainthread.sync(__openURL__)
    elif (__PySharingHelper__.isURL(url)):
        __url__ = url
        mainthread.sync(__openURL__)
    else:
        raise ValueError('url musts be a String or an Objective-C `NSURL`.')

