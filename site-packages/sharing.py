# -*- coding: utf-8 -*-
"""
This module allows you to share items, to import files and to open URLs.
"""

from rubicon.objc import *

if __platform__ is macOS:
    from Cocoa import *
    from Quartz import *
    from threading import Thread
    from time import sleep
else:
    import pyto
    import mainthread
    __PySharingHelper__ = pyto.PySharingHelper

def shareItems(items):
    raise NameError("`shareItems` was renamed to `share_items`")

def pickDocumentsWithFilePicker(items):
    raise NameError("`pickDocumentsWithFilePicker` was renamed to `pick_documents`")

def pickedFiles():
    raise NameError("`pickedFiles` was renamed to `picked_files`")

def openURL(url):
    raise NameError("`openURL` was renamed to `open_url`")

def share_items(items):
    """
    Opens a share sheet with given items.
        
    Args:
        items: Items to be shared with the sheet.
    """
    if __platform__ is iOS:
        __PySharingHelper__.share(items)
    else:
        raise RuntimeError("`share_items` is only supported on iOS.")

def quick_look(path):
    """
    Previews given file.
        
    This function doesn't block the current thread. You can call this function multiple times and the file path will be appended to the current Preview controller. Thread safe.
        
    Args:
        path: Path to preview.
    """
    
    if __platform__ is iOS:
        pyto.QuickLookHelper.previewFile(path)
    else:
        class WindowDelegate(NSObject):
            
            def windowWillClose_(self, notification):
                NSApp.stopModal()

        view = QLPreviewView.alloc().init()
        view.setPreviewItem_(NSURL.fileURLWithPath_("/"))

        window = NSWindow.alloc().init()
        window.setFrame_display_(NSMakeRect(0, 0, 400, 300), True)
        window.setContentView_(view)
        window.setStyleMask_(3)
        window.setDelegate_(WindowDelegate.alloc().init())

        NSApp.runModalForWindow_(window)

# MARK: - File picker

class __FilePicker__:
    """
    A class representing a file picker. On iOS, presents an `UIDocumentPickerViewController` and an `NSOpenPanel` on macOS.
    """

    fileTypes = []
    """
    Document types that can be opened.
    """
    
    allowsMultipleSelection = False
    """
    Allow multiple selection or not.
    """
    
    completion = None
    """
    The code to execute when files where picked.
    """
    
    urls = []
    """
    Picked URLs.
    """

    def __objcFilePicker__(self):
        filePicker = pyto.FilePicker.new()
        filePicker.fileTypes = self.fileTypes
        filePicker.allowsMultipleSelection = self.allowsMultipleSelection
        filePicker.completion = self.completion
    
        return filePicker
    
    def __show__(self):
        if __platform__ is not macOS:
            return

        panel = NSOpenPanel.alloc().init()
        panel.setResolvesAliases_(True)
        panel.setAllowsMultipleSelection_(self.allowsMultipleSelection)
        panel.setAllowedFileTypes_(self.fileTypes)
        panel.setDirectoryURL_(NSURL.fileURLWithPath_(NSHomeDirectory()+"/Downloads"))
        
        if panel.runModal() == 1:
            FilePicker.urls = panel.URLs()
            for url in panel.URLs():
                url.startAccessingSecurityScopedResource()
            self.completion()
    
    @staticmethod
    def new():
        """
        Returns a new file picker.
        
        Should not be used, you can initialize an object by calling `__init__`, this function exists because this class was written in Objective-C.
        """
        
        return __FilePicker__()

FilePicker = __FilePicker__
"""
A class representing a file picker.
    
Example:
    filePicker = sharing.FilePicker()
    filePicker.fileTypes = ["public.data"]
    filePicker.allowsMultipleSelection = True
    
    def filesPicked() -> None:
        files = sharing.pickedFiles()
        sharing.share_items(files)
    
    filePicker.completion = filesPicked
    sharing.pick_documents(filePicker)
"""

def pick_documents(filePicker):
    """
    Pick documents with given parameters as a `FilePicker`.
        
    Args:
        filePicker: The parameters of the file picker to be presented.
    """
    if __platform__ is iOS:
        __PySharingHelper__.presentFilePicker(filePicker.__objcFilePicker__())
    else:
        filePicker.__show__()

def picked_files():
    """
    Returns files picked with `pickDocumentsWithFilePicker` as URLs.
    """
    
    if __platform__ is macOS:
        return FilePicker.urls
    else:
        return pyto.FilePicker.urls

# MARK: - URLs

if __platform__ is iOS:
    __NSURL__ = ObjCClass("NSURL")
    __UIApplication__ = ObjCClass("UIApplication")

def open_url(url):
    """
    Opens the given URL.
    
    Args:
        url: URL to open. Can be a String or an Objective-C `NSURL`.
    """
    
    __url__ = None
    
    def __openURL__() -> None:
        if __platform__ is iOS:
            __UIApplication__.sharedApplication.openURL(__url__)
        else:
            NSWorkspace.sharedWorkspace().openURL(__url__)
    
    if (type(url) is str):
        __url__ = __NSURL__.URLWithString(url)
        mainthread.run_sync(__openURL__)
    elif (__PySharingHelper__.isURL(url)):
        __url__ = url
        mainthread.run_sync(__openURL__)
    else:
        raise ValueError('url musts be a String or an Objective-C `NSURL`.')

