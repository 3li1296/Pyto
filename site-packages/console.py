# -*- coding: utf-8 -*-
"""
This module gives access to the console.
"""

import PytoClasses
import mainthread
from importlib.machinery import SourceFileLoader
import os
import sys
import traceback

__PyContentViewController__ = PytoClasses.PyContentViewController
def __console__():
    return __PyContentViewController__.shared.viewController.viewControllers[0]

def __clear__() -> None:
    __console__().textView.text = ""
    __console__().console = ""

def clear():
    """
    Clears the console.
    """
    mainthread.runSync(__clear__)

def runScriptAtPath(path):
    """
    Run the script at given path catching exceptions.
    
    This function should only be used internally by Pyto.
    
    Args:
        path: The path of the script.
    """
    os.system = PytoClasses.Python.shared.system
    directory = os.path.expanduser(os.path.dirname(path))
    sys.path.insert(0, directory)
    script = None
    try:
        script = SourceFileLoader('main', path).load_module()
        PytoClasses.Python.shared.values = [item for item in dir(script) if not item.startswith("__")]
    except:
        print(traceback.format_exc())
    
    sys.path.remove(directory)

    PytoClasses.ReviewHelper.shared.launches = PytoClasses.ReviewHelper.shared.launches+1
    PytoClasses.ReviewHelper.shared.requestReview()
    PytoClasses.Python.shared.isScriptRunning = False
    __PyContentViewController__.shared.dismissKeyboard()

    return script

# MARK: - I/O

__PyInputHelper__ = PytoClasses.PyInputHelper

def input(prompt="Input"):
    """
    Requests input with given prompt.
        
    Args:
        prompt: Text printed before the user's input without a newline.
    """
    
    __PyInputHelper__.userInput = None
    
    __PyInputHelper__.showAlertWithPrompt(prompt)
    
    while (__PyInputHelper__.userInput == None):
        continue
    
    userInput = __PyInputHelper__.userInput
    __PyInputHelper__.userInput = None
    return str(userInput)

__PyOutputHelper__ = PytoClasses.PyOutputHelper

def print(*objects, sep=None, end=None):
    """
    Prints to the Pyto console, not to the stdout. Works as the builtin `print` function but does not support printing to a custom file. Pyto catches by default the stdout and the stderr, so use the builtin function instead. This function is mainly for internal use.
    """
    if sep is None:
        sep = ' '
    if end is None:
        end = '\n'
    array = map(str, objects)
    __PyOutputHelper__.print(sep.join(array)+end)

# MARK: - Alerts

Alert = PytoClasses.Alert
"""
A class representing an alert.

Example:

    alert = Pyto.Alert.alertWithTitle("Hello", message="Hello World!")
    alert.addAction("Ok")
    alert.addCancel("Cancel")
    if (alert.show() == "Ok"):
        print("Good Bye!")
"""
