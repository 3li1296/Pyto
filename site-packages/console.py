# -*- coding: utf-8 -*-
"""
This module gives access to the console.
"""

import PytoClasses
import mainthread
import importlib.util
import os
import sys
import traceback
import threading

ignoredThreads = []
"""
All output and input request from these threads will be ignored.
"""

def __console__():
    return ConsoleViewController.visible

def __clear__() -> None:
    __console__().textView.text = ""
    __console__().console = ""

def clear():
    """
    Clears the console.
    """
    mainthread.runSync(__clear__)

def runScriptAtPath(path):
    """
    Run the script at given path catching exceptions.
    
    This function should only be used internally by Pyto.
    
    Args:
        path: The path of the script.
    """
    
    def run() -> None:
        os.system = PytoClasses.Python.shared.system
        directory = os.path.expanduser(os.path.dirname(path))
        sys.path.insert(0, directory)
        script = None
        try:
            spec = importlib.util.spec_from_file_location("__main__", path)
            script = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(script)
            PytoClasses.Python.shared.values = [item for item in dir(script) if not item.startswith("__")]
        except SystemExit:
            print("SystemExit")
        except:
            print(traceback.format_exc())

            sys.path.remove(directory)

        PytoClasses.ReviewHelper.shared.launches = PytoClasses.ReviewHelper.shared.launches+1
        PytoClasses.ReviewHelper.shared.requestReview()
        PytoClasses.Python.shared.isScriptRunning = False
        PytoClasses.ConsoleViewController.ignoresInput = True

    thread = threading.Thread(target=run, args=())
    
    def loop():
        while PytoClasses.Python.shared.isScriptRunning:
            continue
        
        ignoredThreads.append(thread)
        thread.exit()
            
        raise Exception("Stopped script!")
    
    def runLoop():
        try:
            loop()
        except:
            pass
    
    
    loopThread = threading.Thread(target=runLoop, args=())
    loopThread.start()
    thread.start()
    thread.join()


# MARK: - I/O

__PyInputHelper__ = PytoClasses.PyInputHelper

def input(prompt="Input"):
    """
    Requests input with given prompt.
        
    Args:
        prompt: Text printed before the user's input without a newline.
    """
    
    __PyInputHelper__.userInput = None
    
    __PyInputHelper__.showAlertWithPrompt(prompt)
    
    while (__PyInputHelper__.userInput == None):
        
        if (threading.currentThread() in ignoredThreads):
            return ""
        
        continue
    
    userInput = __PyInputHelper__.userInput
    __PyInputHelper__.userInput = None
    return str(userInput)

__PyOutputHelper__ = PytoClasses.PyOutputHelper

def print(*objects, sep=None, end=None):
    """
    Prints to the Pyto console, not to the stdout. Works as the builtin `print` function but does not support printing to a custom file. Pyto catches by default the stdout and the stderr, so use the builtin function instead. This function is mainly for internal use.
    """
    if sep is None:
        sep = ' '
    if end is None:
        end = '\n'
    array = map(str, objects)
    __PyOutputHelper__.print(sep.join(array)+end)

# MARK: - Alerts

Alert = PytoClasses.Alert
"""
A class representing an alert.

Example:

    alert = Pyto.Alert.alertWithTitle("Hello", message="Hello World!")
    alert.addAction("Ok")
    alert.addCancel("Cancel")
    if (alert.show() == "Ok"):
        print("Good Bye!")
"""
