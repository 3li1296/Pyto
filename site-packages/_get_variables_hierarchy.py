from types import ModuleType as Module
import sys
import rubicon.objc

__inspected_times__ = {}

def get_variables_hierarchy(object):
    
    global __inspected_times__
    
    vars = {}
    
    def represent(value_):
        
        value = value_
        
        if type(value) is Module:
            value = value.__dict__
        
        try:
            if repr(value) in __inspected_times__:
                __inspected_times__[repr(value)] = __inspected_times__[repr(value)]+1
            else:
                __inspected_times__[repr(value)] = 1
        
            if __inspected_times__[repr(value)] > 5:
                    return repr(value)
        except Exception as e:
            pass
        
        if type(value) is list:
            
            i = 0
            dictionnary = {}
            for value_ in value:
                if type(value_) is rubicon.objc.api.ObjCClass or type(value_) is rubicon.objc.api.ObjCInstance:
                    dictionnary[str(i)] = value
                elif type(value_) is dict or type(value_) is list:
                    dictionnary[str(i)] = represent(value_.copy())
                else:
                    dictionnary[str(i)] = repr(value_)
                i += 1
            return dictionnary
                
        elif type(value) is dict:
            
            dictionnary = {}
            for key_, value_ in value.items():
                if type(value_) is rubicon.objc.api.ObjCClass or type(value_) is rubicon.objc.api.ObjCInstance:
                    dictionnary[str(key_)] = value_
                elif type(value_) is dict or type(value_) is list:
                    dictionnary[str(key_)] = represent(value_.copy())
                else:
                    dictionnary[str(key_)] = repr(value_)
            return dictionnary
        elif type(value) is rubicon.objc.api.ObjCClass or type(value) is rubicon.objc.api.ObjCInstance:
            return value
        elif type(value) is str and not value.startswith("'") and not value.endswith("'"):
            return "'"+value+"'"
        else:
            return repr(value)
    
    if type(object) is dict:
        module = Module("__inspected__")
        for (key, value) in object.items():
            module.__dict__[key] = value
        object = module

    for key in dir(object):
        vars[key] = represent(getattr(object, key))

    __inspected_times__ = {}
    
    return vars
