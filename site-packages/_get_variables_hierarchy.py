from types import ModuleType as Module
import sys

def get_variables_hierarchy(object):
    
    vars = {}
    
    def represent(value_):
        
        value = value_
        
        if type(value) is Module:
            value = value.__dict__
        
        if type(value) is list:
            
            i = 0
            dictionnary = {}
            for value_ in value:
                if type(value_) is dict or type(value_) is list:
                    dictionnary[str(i)] = represent(value_.copy())
                else:
                    dictionnary[str(i)] = repr(value_)
                i += 1
            return dictionnary
                
        elif type(value) is dict:
            
            dictionnary = {}
            for key_, value_ in value.items():
                if type(value_) is dict or type(value_) is list:
                    dictionnary[str(key_)] = represent(value_.copy())
                else:
                    dictionnary[str(key_)] = repr(value_)
            return dictionnary
        
        elif type(value) is str and not value.startswith("'") and not value.endswith("'"):
            return "'"+value+"'"
        else:
            return repr(value)
    
    for key in dir(object):
        vars[key] = represent(getattr(object, key))
    
    return vars
